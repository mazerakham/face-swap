<cline-context>
    <rules>
        <rule>
            Never start an import with `from src.`. src is not a module. Also never
            use relative imports beyond a single `.` for same package.  We use
            a setup.py file to implement this standard.  We also indicate in a vscode
            settings file to open all terminals in a venv.
        </rule>
        <rule>
            You're an experienced senior python engineer. You know how to set up
            a python project correctly using best practices. You never use hacks like setting
            environment variables to get scripts to run. You're an expert at how python works
            under the hood and how python scripts are supposed to be run. Moreover, if you see
            a project is not running as you expect, rather than hacking your way toward a solution,
            you criticize the project and fix it to use a correct directory and file structure
            in accordance with best practices for modern python development.
        </rule>
        <rule>Do not use `ls -R`, there are too many files and it will print too much.</rule>
        <rule>Use `pyright src` to check compiler errors and `pytest` to run unit tests after every
            major
            change.
            Also run `pyright test` for the test code. Use strong typing aggressively. Major
            service functions that are expected to be called by other files should define a request
            and response object data structure.</rule>
        <rule> DO NOT use try-except and do not write None-checks. Strong-type everything and use
            Optional[Foo] if it really is an expected case that the Foo can be present or absent.
            Use assertions to coerce to Foo or throw if Foo is not optional according to "business
            logic". A common example of this is XML parsing errors from LLM responses. The issue is
            almost never that the LLM returned a bad response but that the prompt is misaligned with
            the code. In such cases, we need to fail fast (as always) and fix the prompt. <rule>Don't
            let files exceed 100 lines.
                Break them into modules when they reach this point.</rule>
        <rule>Update the
            `reference` section
                of this XML doc with `note`s.</rule>
        </rule>
        <rule>Keep source code files under 100 lines so they are AI assistant-friendly.  When you think a file
            needs to grow larger, split it and make it more modular. 
        </rule>
        <rule>Inline comments are almost always bad and a code smell.  Good code should
            explain itself.
        </rule>
        <rule>No try-excepts.  Fail fast everywhere possible.</rule>
        <rule>Primary git branch is `master`.</rule>
        <rule>NEVER touch css unless I've EXPLICITLY instructed you to work on
        app styling.</rule>
    </rules>

    <long-term-memory>
        <note>
            I'm building a simple API and UI to automate a workflow
            for doing an image face-swap using an existing API.  
        </note>
        <note>
            Start app:
            ```
            uvicorn face_swap.app:app --reload  # Terminal 1
            cd frontend && npm start            # Terminal 2
            ```
        </note>
        <note>
          src/scripts/dalle/darth_vader_example.py demonstrates how to generate
            an image and modify the augmented prompts to edit an image by re-prompting
            using the OpenAI client.  This will be necessary when we are implementing
            the parts of the project where the user is providing feedback on images.
        </note>
    </long-term-memory>

    <current-task>
        Read and understand all docs in ./cline/plan for 
        product specs and project structure before you
        start.  Ask me clarifying quesitons and update
        the docs if anything does not make perfect sense
        or you would recommend a better way to do things.

        The project is implemented, so we're basically
        in a debugging stage now.  

        1.  The first screen works.
        
        2.  The second screen, accepting an image uplaod
        of the user's headshot, seems to work.

        3.  The third screen where the user answers questions
        seems to basically work. 

        4.  The generate image screen works.  An image
        is generated. 

        5.  The following screen where user can repeatedly
        give feedback on the image and regenerate is working.

        6. The final screen with the face swap doesn't work. 

        I looked more deeply at this.  The front-end is 
        correctly sending an API request to backend for
        a faceswap.  In fact, I recommend you put this 
        into a curl request or python script to
        trouble-shoot. 

        Request URL: POST to http://localhost:8000/api/v1/swap
        Request body:
        {
          "source_url": "https://jake-public-01.s3.us-east-1.amazonaws.com/uploads/base_face_darth.png",
          "target_url": "https://oaidalleapiprodscus.blob.core.windows.net/private/org-OqfnbUaLOOzFNJuvjw0vLyqa/user-t7MEMNrMjJHzF1XFnZ6aWO0K/img-19FvB0Azl1BjMUH5uzCsQP6z.png?st=2025-01-29T17%3A58%3A16Z&se=2025-01-29T19%3A58%3A16Z&sp=r&sv=2024-08-04&sr=b&rscd=inline&rsct=image/png&skoid=d505667d-d6c1-4a0a-bac7-5c84a87759f8&sktid=a48cca56-e6da-484e-a814-9c849652bcb3&skt=2025-01-29T00%3A46%3A32Z&ske=2025-01-30T00%3A46%3A32Z&sks=b&skv=2024-08-04&sig=XzmW33NTSPs17OT1TOw3LPZQvG3aNcZxTjEMx1ISFaM%3D"
        }
        Error to troubleshoot:
        "Error occured when getting face bounding boxes"

        This is almost-certainly an issue with Icon8 API, but 
        I wasn't getting this problem before, so I suspect we're
        sending an invalid image.  

        As I said, write a script to trouble-shoot this API endpoint.
        Consider print statements or any technique you see fit
        to check our API request(s) to Icon8. 
    </current-task>
</cline-context>
