Yes, it's certainly possible to use the AWS SDK in a Pydantic project. The issue you're encountering is likely due to a conflict between Pydantic's field naming conventions and an internal attribute used by the AWS SDK. Here are some ways to work around this:

1. Update dependencies: Ensure you're using the latest versions of Pydantic and the AWS SDK. This issue may have been resolved in newer versions[4][5].

2. Use Pydantic v2: If you're not already using it, consider upgrading to Pydantic v2, which has improved compatibility with various libraries[5].

3. Implement a custom Config class: You can create a custom Config class for your Pydantic models to ignore specific fields:

```python
from pydantic import BaseModel

class MyModel(BaseModel):
    class Config:
        ignore_extra = True
```

This will make Pydantic ignore any extra fields, including "_cli_parse_args"[1].

4. Use AWS Lambda Powertools: Consider using AWS Lambda Powertools, which provides a Parser utility that simplifies data parsing and validation using Pydantic, with built-in support for common AWS event sources[4].

5. Use TypeAdapter: Instead of inheriting from BaseModel, you can use Pydantic's TypeAdapter for parsing incoming events, which might avoid the naming conflict[4].

If these solutions don't resolve the issue, you may need to examine your project's dependency tree to identify where the "_cli_parse_args" field is being introduced. It's possible that a third-party library you're using is causing this conflict.

Remember, while working with AWS services in Pydantic projects, it's generally a good practice to define your data models using Python classes and use Pydantic for parsing and validating incoming events[6][7]. This approach can help you maintain clean, type-safe code while working with AWS services.

Citations:
[1] https://github.com/koxudaxi/lambdantic
[2] https://pydantic.dev/articles/lambda-intro
[3] https://arrrrrmin.netlify.app/posts/pydantic_powers/
[4] https://docs.powertools.aws.dev/lambda/python/latest/utilities/parser/
[5] https://docs.powertools.aws.dev/lambda/python/2.30.2/utilities/parser/
[6] https://docs.pydantic.dev/latest/integrations/aws_lambda/
[7] https://stackoverflow.com/questions/78156515/pydantic-how-to-model-aws-services-and-their-resources
[8] https://github.com/pydantic/pydantic/discussions/4271