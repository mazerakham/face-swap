Implementation Strategy for V2 Part 1: Target Images with Multiple Faces

Current Behavior:
- Face swap operation uses the first face detected in the target image
- This can lead to suboptimal results when multiple faces are present
- No consideration for face prominence/size

Proposed Changes:

1. Face Selection Service Module
Location: backend/src/discovita/service/icons8/face_selection.py
Purpose: Encapsulate face selection logic
Key Functions:
- select_primary_face(faces: list[BoundingBox]) -> BoundingBox
- calculate_face_area(box: BoundingBox) -> float

2. Icons8 Service Enhancement
Location: backend/src/discovita/service/icons8/icons8_service.py
Changes:
- Import face selection module
- Modify face swap logic to use select_primary_face
- Add strong typing for face detection response
- Remove any try-except blocks in favor of assertions

3. Data Models
Location: backend/src/discovita/service/icons8/models.py
Additions:
- BoundingBox dataclass with:
  - x: int
  - y: int
  - width: int
  - height: int
- FaceDetectionResponse dataclass
- FaceSwapRequest dataclass with validated fields

Implementation Steps:

1. Create Data Models
- Define strongly typed dataclasses for all Icons8 API interactions
- Use Optional[] only where truly needed
- Add assertions for business logic validation

2. Implement Face Selection Logic
- Create face_selection.py module
- Implement area calculation: width * height
- Add primary face selection based on largest area
- Include unit tests for selection logic

3. Integrate with Icons8 Service
- Modify face swap endpoint to use new face selection
- Update type hints and remove any try-except blocks
- Add assertions for critical assumptions
- Update tests to cover multiple face scenarios

4. Testing Strategy
Location: backend/test/test_icons8_client.py
- Add test cases with multiple face images
- Verify largest face is selected
- Test edge cases (no faces, equal size faces)
- Use real API responses as test fixtures

Success Criteria:
1. All code strongly typed with no Optional[] unless necessary
2. No try-except blocks
3. Files remain under 100 lines
4. All tests passing
5. Face swap consistently selects largest/most prominent face

This implementation maintains Python best practices while adding robust face selection logic. The modular approach keeps files small and focused, making future maintenance and updates straightforward.
