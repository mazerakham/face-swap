Plan to Address S3 Upload Issue

Root Cause:
- The error occurs when adding the file upload endpoint
- The error message suggests a Pydantic field name issue with '_cli_parse_args'
- This likely comes from FastAPI's File dependency which may be using Pydantic under the hood with a field that has a leading underscore

Proposed Solution:

1. Create a dedicated Pydantic model for file uploads:
   - Define FileUploadRequest model with proper field names
   - Move file handling logic into a separate service class
   - This gives us more control over the field names and validation

2. Restructure the upload endpoint:
   - Remove direct File dependency usage
   - Use our custom model for request validation
   - Handle multipart form data explicitly

3. Create an S3Service class:
   - Move S3 client creation and upload logic to dedicated service
   - Ensure strong typing throughout
   - Keep the service class small and focused

4. Update minimal_routes.py:
   - Use the new models and services
   - Keep the route handler thin, delegating to services
   - Ensure proper error handling without try/except

Implementation Steps:

1. Create new models:
```python
class FileUploadRequest(BaseModel):
    filename: str
    content_type: str
    content: bytes
```

2. Create S3Service:
```python
class S3Service:
    def __init__(self, settings: Settings) -> None:
        self.client = self.create_client(settings)
        self.bucket = settings.s3_bucket
        self.region = settings.aws_region
    
    def upload(self, request: FileUploadRequest) -> str:
        # Upload logic here
        return url
```

3. Update route handler:
```python
@router.post("/upload")
async def upload_image(
    request: FileUploadRequest,
    s3_service: S3Service = Depends()
) -> dict[str, str]:
    url = s3_service.upload(request)
    return {"url": url}
```

Expected Outcome:
- Clean separation of concerns
- Strong typing throughout
- No leading underscore issues
- More maintainable and testable code
- Better error handling without try/except

Next Steps:
1. Implement the models
2. Create the S3Service
3. Update the route handler
4. Test the new implementation
5. If successful, apply similar patterns to other endpoints
