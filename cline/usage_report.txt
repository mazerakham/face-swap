Usage Report: get_openai_client Dependency

Current Implementation:
- Returns AsyncClient (httpx) with OpenAI base URL and configuration
- Used as FastAPI dependency in routes

Usage Locations:

1. image_description.py route:
   - Expects OpenAIClient but gets AsyncClient
   - Current code would fail since AsyncClient doesn't have required methods

2. image_generation.py route:
   - Expects OpenAIClient but gets AsyncClient
   - Current code would fail since AsyncClient doesn't have required methods

Analysis:
The current implementation has a type mismatch. Routes expect OpenAIClient but the dependency provides AsyncClient. This suggests the code hasn't been tested since it would fail at runtime.

Proposed Solution:

1. Create a new dependency for OpenAIClient:
```python
async def get_openai_service(
    settings: Settings = Depends(get_settings)
) -> OpenAIClient:
    """Get OpenAI service client."""
    return OpenAIClient(
        api_key=settings.openai_api_key,
        base_url="https://api.openai.com/v1"
    )
```

2. Keep existing get_openai_client for any code that needs raw AsyncClient

3. Update routes to use new dependency:
- image_description.py: Switch to get_openai_service
- image_generation.py: Switch to get_openai_service

This approach:
- Maintains backward compatibility for any code using AsyncClient
- Provides properly typed OpenAIClient where needed
- Follows separation of concerns
- Avoids breaking changes

Next Steps:
1. Create new dependency
2. Update routes to use new dependency
3. Add tests to verify both clients work as expected
4. Consider deprecating get_openai_client if not used elsewhere
